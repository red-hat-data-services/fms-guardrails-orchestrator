ARG UBI_MINIMAL_BASE_IMAGE=registry.access.redhat.com/ubi9/ubi-minimal
ARG UBI_BASE_IMAGE_TAG=latest
ARG PROTOC_VERSION=29.3
ARG CONFIG_FILE=config/config.yaml
ARG TARGETARCH

## Rust builder ################################################################
FROM ${UBI_MINIMAL_BASE_IMAGE}:${UBI_BASE_IMAGE_TAG} AS rust-builder
ARG PROTOC_VERSION
ARG TARGETARCH

ENV CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse

# Install dependencies
RUN microdnf --disableplugin=subscription-manager -y update && \
    microdnf install --disableplugin=subscription-manager -y \
        unzip \
        ca-certificates \
        openssl-devel \
        gcc && \
    microdnf clean all

COPY rust-toolchain.toml rust-toolchain.toml

# Install rustup [needed for latest Rust versions]
RUN curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain none -y --no-modify-path && \
    . "$HOME/.cargo/env" && \
    rustup install && \
    rustup component add rustfmt

# Set PATH so rustc, cargo, rustup are available
ENV PATH="/root/.cargo/bin:${PATH}"

# Install protoc, no longer included in prost crate
RUN cd /tmp && \
    if [ "$TARGETARCH" = "arm64" ]; then \
        curl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-aarch_64.zip; \
    elif [ "$TARGETARCH" = "amd64" ]; then \
        curl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip; \
    elif [ "$TARGETARCH" = "ppc64le" ]; then \
        microdnf update && \
        microdnf install -y cmake clang && \
        curl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-ppcle_64.zip; \
    else \
        echo "Unsupported TARGETARCH: $TARGETARCH (only amd64 and arm64 are supported)" >&2; exit 1; \
    fi && \
    unzip protoc-*.zip -d /usr/local && rm protoc-*.zip

# Find libclang.so (resolves differences across architectures)
RUN ln -s $(ldconfig -p | grep libclang.so | awk '{print $4}' | head -n1) /usr/lib64/libclang.so || true

ENV LIBCLANG_PATH=/usr/lib64/

WORKDIR /app

## Orchestrator builder #########################################################
FROM rust-builder AS fms-guardrails-orchestr8-builder
ARG CONFIG_FILE=config/config.yaml

COPY build.rs *.toml LICENSE /app/
COPY ${CONFIG_FILE} /app/config/config.yaml
COPY protos/ /app/protos/
COPY src/ /app/src/
COPY tests/ /app/tests/

WORKDIR /app

# TODO: Make releases via cargo-release
RUN cargo build --release
# Copy test resources required for executing unit tests
COPY tests/resources /app/tests/resources
RUN cargo test

## Release Image ################################################################

FROM ${UBI_MINIMAL_BASE_IMAGE}:${UBI_BASE_IMAGE_TAG} AS fms-guardrails-orchestr8-release
ARG CONFIG_FILE=config/config.yaml
ARG TARGETARCH

COPY --from=fms-guardrails-orchestr8-builder /app/target/release/fms-guardrails-orchestr8 /app/bin/
COPY ${CONFIG_FILE} /app/config/config.yaml

# Install packages based on target architecture
RUN microdnf install -y --disableplugin=subscription-manager shadow-utils && \
    if [ "$TARGETARCH" = "amd64" ]; then \
        microdnf install -y --disableplugin=subscription-manager compat-openssl11 || \
        microdnf install -y --disableplugin=subscription-manager openssl; \
    else \
        microdnf install -y --disableplugin=subscription-manager openssl; \
    fi && \
    microdnf clean all --disableplugin=subscription-manager

RUN groupadd --system orchestr8 --gid 1001 && \
    adduser --system --uid 1001 --gid 0 --groups orchestr8 \
    --create-home --home-dir /app --shell /sbin/nologin \
    --comment "FMS Orchestrator User" orchestr8

USER orchestr8

HEALTHCHECK NONE

ENV ORCHESTRATOR_CONFIG=/app/config/config.yaml

CMD ["/app/bin/fms-guardrails-orchestr8"]

LABEL name="rhoai/odh-fms-guardrails-orchestrator-rhel9" \
      com.redhat.component="odh-fms-guardrails-orchestrator-rhel9" \
      io.k8s.display-name="odh-fms-guardrails-orchestrator-rhel9" \
      io.k8s.description="The Guardrails Orchestrator serves as a REST API orchestrator that coordinates AI text generation with safety guardrails, acting as middleware between clients and language models to provide content safety detection, filtering, and secure text generation. It manages multiple detector services, chunking services, and LLM backends through unified APIs, ensuring harmful content is blocked while enabling safe AI interactions." \
      description="The Guardrails Orchestrator serves as a REST API orchestrator that coordinates AI text generation with safety guardrails, acting as middleware between clients and language models to provide content safety detection, filtering, and secure text generation. It manages multiple detector services, chunking services, and LLM backends through unified APIs, ensuring harmful content is blocked while enabling safe AI interactions." \
      summary="A REST API orchestrator that enforces content safety by coordinating detectors, filters, and LLMs for secure AI text generation." \
      com.redhat.license_terms="https://www.redhat.com/licenses/Red_Hat_Standard_EULA_20191108.pdf"
